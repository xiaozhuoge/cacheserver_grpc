// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: CacheService.proto

package cacheserver_grpc_go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CacheServiceClient is the client API for CacheService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CacheServiceClient interface {
	SetStringValue(ctx context.Context, in *SetStringRequest, opts ...grpc.CallOption) (*ResultDataWithString, error)
	SetIntValue(ctx context.Context, in *SetIntRequest, opts ...grpc.CallOption) (*ResultDataWithString, error)
	SetStringValueNx(ctx context.Context, in *SetStringRequest, opts ...grpc.CallOption) (*ResultDataWithBool, error)
	SetIntValueNx(ctx context.Context, in *SetIntRequest, opts ...grpc.CallOption) (*ResultDataWithBool, error)
	LoadKeyIntValue(ctx context.Context, in *OneKeyRequest, opts ...grpc.CallOption) (*ResultDataWithInt64, error)
	LoadKeyStringValue(ctx context.Context, in *OneKeyRequest, opts ...grpc.CallOption) (*ResultDataWithString, error)
	IncreaseKey(ctx context.Context, in *OneKeyRequest, opts ...grpc.CallOption) (*ResultDataWithInt64, error)
	SetExpire(ctx context.Context, in *SetExpireRequest, opts ...grpc.CallOption) (*ResultDataWithBool, error)
	RemoveKeys(ctx context.Context, in *MultipleKeyRequest, opts ...grpc.CallOption) (*ResultDataWithInt64, error)
}

type cacheServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCacheServiceClient(cc grpc.ClientConnInterface) CacheServiceClient {
	return &cacheServiceClient{cc}
}

func (c *cacheServiceClient) SetStringValue(ctx context.Context, in *SetStringRequest, opts ...grpc.CallOption) (*ResultDataWithString, error) {
	out := new(ResultDataWithString)
	err := c.cc.Invoke(ctx, "/cacheserver_grpc.CacheService/SetStringValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) SetIntValue(ctx context.Context, in *SetIntRequest, opts ...grpc.CallOption) (*ResultDataWithString, error) {
	out := new(ResultDataWithString)
	err := c.cc.Invoke(ctx, "/cacheserver_grpc.CacheService/SetIntValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) SetStringValueNx(ctx context.Context, in *SetStringRequest, opts ...grpc.CallOption) (*ResultDataWithBool, error) {
	out := new(ResultDataWithBool)
	err := c.cc.Invoke(ctx, "/cacheserver_grpc.CacheService/SetStringValueNx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) SetIntValueNx(ctx context.Context, in *SetIntRequest, opts ...grpc.CallOption) (*ResultDataWithBool, error) {
	out := new(ResultDataWithBool)
	err := c.cc.Invoke(ctx, "/cacheserver_grpc.CacheService/SetIntValueNx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) LoadKeyIntValue(ctx context.Context, in *OneKeyRequest, opts ...grpc.CallOption) (*ResultDataWithInt64, error) {
	out := new(ResultDataWithInt64)
	err := c.cc.Invoke(ctx, "/cacheserver_grpc.CacheService/LoadKeyIntValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) LoadKeyStringValue(ctx context.Context, in *OneKeyRequest, opts ...grpc.CallOption) (*ResultDataWithString, error) {
	out := new(ResultDataWithString)
	err := c.cc.Invoke(ctx, "/cacheserver_grpc.CacheService/LoadKeyStringValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) IncreaseKey(ctx context.Context, in *OneKeyRequest, opts ...grpc.CallOption) (*ResultDataWithInt64, error) {
	out := new(ResultDataWithInt64)
	err := c.cc.Invoke(ctx, "/cacheserver_grpc.CacheService/IncreaseKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) SetExpire(ctx context.Context, in *SetExpireRequest, opts ...grpc.CallOption) (*ResultDataWithBool, error) {
	out := new(ResultDataWithBool)
	err := c.cc.Invoke(ctx, "/cacheserver_grpc.CacheService/SetExpire", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) RemoveKeys(ctx context.Context, in *MultipleKeyRequest, opts ...grpc.CallOption) (*ResultDataWithInt64, error) {
	out := new(ResultDataWithInt64)
	err := c.cc.Invoke(ctx, "/cacheserver_grpc.CacheService/RemoveKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CacheServiceServer is the server API for CacheService service.
// All implementations must embed UnimplementedCacheServiceServer
// for forward compatibility
type CacheServiceServer interface {
	SetStringValue(context.Context, *SetStringRequest) (*ResultDataWithString, error)
	SetIntValue(context.Context, *SetIntRequest) (*ResultDataWithString, error)
	SetStringValueNx(context.Context, *SetStringRequest) (*ResultDataWithBool, error)
	SetIntValueNx(context.Context, *SetIntRequest) (*ResultDataWithBool, error)
	LoadKeyIntValue(context.Context, *OneKeyRequest) (*ResultDataWithInt64, error)
	LoadKeyStringValue(context.Context, *OneKeyRequest) (*ResultDataWithString, error)
	IncreaseKey(context.Context, *OneKeyRequest) (*ResultDataWithInt64, error)
	SetExpire(context.Context, *SetExpireRequest) (*ResultDataWithBool, error)
	RemoveKeys(context.Context, *MultipleKeyRequest) (*ResultDataWithInt64, error)
	mustEmbedUnimplementedCacheServiceServer()
}

// UnimplementedCacheServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCacheServiceServer struct {
}

func (UnimplementedCacheServiceServer) SetStringValue(context.Context, *SetStringRequest) (*ResultDataWithString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStringValue not implemented")
}
func (UnimplementedCacheServiceServer) SetIntValue(context.Context, *SetIntRequest) (*ResultDataWithString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIntValue not implemented")
}
func (UnimplementedCacheServiceServer) SetStringValueNx(context.Context, *SetStringRequest) (*ResultDataWithBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStringValueNx not implemented")
}
func (UnimplementedCacheServiceServer) SetIntValueNx(context.Context, *SetIntRequest) (*ResultDataWithBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIntValueNx not implemented")
}
func (UnimplementedCacheServiceServer) LoadKeyIntValue(context.Context, *OneKeyRequest) (*ResultDataWithInt64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadKeyIntValue not implemented")
}
func (UnimplementedCacheServiceServer) LoadKeyStringValue(context.Context, *OneKeyRequest) (*ResultDataWithString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadKeyStringValue not implemented")
}
func (UnimplementedCacheServiceServer) IncreaseKey(context.Context, *OneKeyRequest) (*ResultDataWithInt64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncreaseKey not implemented")
}
func (UnimplementedCacheServiceServer) SetExpire(context.Context, *SetExpireRequest) (*ResultDataWithBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetExpire not implemented")
}
func (UnimplementedCacheServiceServer) RemoveKeys(context.Context, *MultipleKeyRequest) (*ResultDataWithInt64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveKeys not implemented")
}
func (UnimplementedCacheServiceServer) mustEmbedUnimplementedCacheServiceServer() {}

// UnsafeCacheServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CacheServiceServer will
// result in compilation errors.
type UnsafeCacheServiceServer interface {
	mustEmbedUnimplementedCacheServiceServer()
}

func RegisterCacheServiceServer(s grpc.ServiceRegistrar, srv CacheServiceServer) {
	s.RegisterService(&CacheService_ServiceDesc, srv)
}

func _CacheService_SetStringValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).SetStringValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cacheserver_grpc.CacheService/SetStringValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).SetStringValue(ctx, req.(*SetStringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_SetIntValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetIntRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).SetIntValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cacheserver_grpc.CacheService/SetIntValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).SetIntValue(ctx, req.(*SetIntRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_SetStringValueNx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).SetStringValueNx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cacheserver_grpc.CacheService/SetStringValueNx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).SetStringValueNx(ctx, req.(*SetStringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_SetIntValueNx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetIntRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).SetIntValueNx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cacheserver_grpc.CacheService/SetIntValueNx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).SetIntValueNx(ctx, req.(*SetIntRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_LoadKeyIntValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OneKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).LoadKeyIntValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cacheserver_grpc.CacheService/LoadKeyIntValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).LoadKeyIntValue(ctx, req.(*OneKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_LoadKeyStringValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OneKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).LoadKeyStringValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cacheserver_grpc.CacheService/LoadKeyStringValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).LoadKeyStringValue(ctx, req.(*OneKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_IncreaseKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OneKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).IncreaseKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cacheserver_grpc.CacheService/IncreaseKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).IncreaseKey(ctx, req.(*OneKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_SetExpire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetExpireRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).SetExpire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cacheserver_grpc.CacheService/SetExpire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).SetExpire(ctx, req.(*SetExpireRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_RemoveKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultipleKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).RemoveKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cacheserver_grpc.CacheService/RemoveKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).RemoveKeys(ctx, req.(*MultipleKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CacheService_ServiceDesc is the grpc.ServiceDesc for CacheService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CacheService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cacheserver_grpc.CacheService",
	HandlerType: (*CacheServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetStringValue",
			Handler:    _CacheService_SetStringValue_Handler,
		},
		{
			MethodName: "SetIntValue",
			Handler:    _CacheService_SetIntValue_Handler,
		},
		{
			MethodName: "SetStringValueNx",
			Handler:    _CacheService_SetStringValueNx_Handler,
		},
		{
			MethodName: "SetIntValueNx",
			Handler:    _CacheService_SetIntValueNx_Handler,
		},
		{
			MethodName: "LoadKeyIntValue",
			Handler:    _CacheService_LoadKeyIntValue_Handler,
		},
		{
			MethodName: "LoadKeyStringValue",
			Handler:    _CacheService_LoadKeyStringValue_Handler,
		},
		{
			MethodName: "IncreaseKey",
			Handler:    _CacheService_IncreaseKey_Handler,
		},
		{
			MethodName: "SetExpire",
			Handler:    _CacheService_SetExpire_Handler,
		},
		{
			MethodName: "RemoveKeys",
			Handler:    _CacheService_RemoveKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "CacheService.proto",
}
